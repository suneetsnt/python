StudentRecord=list()
StudentRecord.append((000,"Default","000"))

def add():
  
  addStudent='Y'

  while addStudent=='Y' or addStudent=='y':
    name=input("Please enter Student Name : ").title()
    if(name.isalpha()==False):
      print("Student Name must only be alphabets /n Please re-enter the details")
      continue

    num=input("Please enter Student Number : ")
    if(num.isdigit()==False or len(num)>8):
      print("Student Number must be numerical and less than or equal to 8 digits /n Please re-enter the details")
      continue

    fl=0
    
    for g,h,j in StudentRecord:
      if(int(num) == g):
        print("Student Number Already Exists /n Please re-enter the details ")
        fl=1
        
    if(fl==1):
      continue


    course=input("Please enter Course Code : ")
    if(len(course)>7):
      print("Student Number must be numerical and less than or equal to 8 digits /n Please re-enter the details")
      continue
      
    detail=(int(num),name,course)
    sort(0,int(len(StudentRecord)/2),len(StudentRecord)-1,detail)

    print("Do you wish to add students to the database?\n")
    addStudent=input("Input Y for Yes or any other key to exit : ")
    if(addStudent=='Y' or addStudent=='y'):
      continue
    else:
      print("Finished inputting Student Records")
      print(StudentRecord)

      break
      
def sort(l,m,h,n):
  low=int(l)
  mid=int(m)
  high=int(h)
  newVal=n[0]
  
  if(newVal<StudentRecord[low][0]):
    print((low,high,mid))
    StudentRecord.insert(low,n)
    return

  if(newVal>StudentRecord[high][0]):
    StudentRecord.insert(high+1,n)
    return
    
  if low<mid:

    if(newVal>StudentRecord[low][0] and newVal<StudentRecord[mid][0]):
      high=mid
      mid=int((low+high)/2)
      sort(low,mid,high,n)
    
    if(newVal>StudentRecord[mid][0] and newVal<StudentRecord[high][0]):
      low=mid
      mid=int((low+high)/2)
      sort(low,mid,high,n)

  
    if(low==mid):
        StudentRecord.insert(mid+1,n)
        return
      
  return
  
def retrieve():
  
  if(len(StudentRecord)>1):
    nn=StudentRecord[1]
    StudentRecord.pop(1)
    return nn
  else:
    return "Empty Record"


add()

retrieve()



